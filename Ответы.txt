1.

// Проверяет, високосный ли год
bool is_leap_year(int year) {
    return (year % 400 == 0) || ((year % 100 != 0) && (year % 4 == 0));
}

// Возвращает количество дней в месяце
int days_in_month(int month, int year) {
    if (month == 2) return is_leap_year(year) ? 29 : 28;
    if (month == 4 || month == 6 || month == 9 || month == 11) return 30;
    return 31;
}

// Считает разницу в днях между двумя датами
int date_diff(int day1, int month1, int year1, int day2, int month2, int year2) {
    int days = 0;
    while (day1 != day2 || month1 != month2 || year1 != year2) {
        day1++;
        days++;
        if (day1 > days_in_month(month1, year1)) {
            day1 = 1;
            month1++;
            if (month1 > 12) {
                month1 = 1;
                year1++;
            }
        }
    }
    return days;
}

// Читает дату из файла и вычисляет разницу с текущей датой
void calculate_days_to_date() {
    FILE *file = fopen("input.txt", "r");
    if (!file) {
        printf("Ошибка: файл input.txt не найден.\n");
        return;
    }

    int year, month, day;
    if (fscanf(file, "%d-%d-%d", &year, &month, &day) != 3) {
        printf("Ошибка: неверный формат даты. Ожидается YYYY-MM-DD.\n");
        fclose(file);
        return;
    }
    fclose(file);

    // Получаем текущую дату
    time_t now = time(NULL);
    struct tm *current_time = localtime(&now);
    int current_day = current_time->tm_mday;
    int current_month = current_time->tm_mon + 1;  // tm_mon начинается с 0
    int current_year = current_time->tm_year + 1900;  // tm_year = текущий год - 1900

    int days_remaining = date_diff(current_day, current_month, current_year, day, month, year);
    printf("До даты %04d-%02d-%02d осталось %d дней.\n", year, month, day, days_remaining);
}

3. 

// Создаёт квадратную матрицу размера `size` и заполняет её случайными числами
int** generate_matrix(int size) {
    int **matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (int*)malloc(size * sizeof(int));
        for (int j = 0; j < size; j++) {
            matrix[i][j] = rand() % 10 + 1;  // Числа от 1 до 10
        }
    }
    return matrix;
}

// Записывает две матрицы в файл
void write_matrices_to_file(const char *filename, int **matrix1, int **matrix2, int size) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        printf("Ошибка: не удалось создать файл.\n");
        return;
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            fprintf(file, "%d ", matrix1[i][j]);
        }
        fprintf(file, "\n");
    }
    fprintf(file, "\n");  // Разделитель между матрицами

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            fprintf(file, "%d ", matrix2[i][j]);
        }
        fprintf(file, "\n");
    }
    fclose(file);
}

5. 

// Читает матрицу из файла
int** read_matrix(FILE *file, int size) {
    int **matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (int*)malloc(size * sizeof(int));
        for (int j = 0; j < size; j++) {
            fscanf(file, "%d", &matrix[i][j]);
        }
    }
    return matrix;
}

// Умножает две матрицы
int** matrix_multiply(int **a, int **b, int size) {
    int **result = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        result[i] = (int*)malloc(size * sizeof(int));
        for (int j = 0; j < size; j++) {
            result[i][j] = 0;
            for (int k = 0; k < size; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    return result;
}

// Складывает две матрицы
int** matrix_add(int **a, int **b, int size) {
    int **result = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        result[i] = (int*)malloc(size * sizeof(int));
        for (int j = 0; j < size; j++) {
            result[i][j] = a[i][j] + b[i][j];
        }
    }
    return result;
}

// Записывает результат в файл output.txt
void write_result_to_file(const char *filename, int **mult_result, int **add_result, int size) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        printf("Ошибка: не удалось создать файл.\n");
        return;
    }

    fprintf(file, "Результат умножения матриц:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            fprintf(file, "%d ", mult_result[i][j]);
        }
        fprintf(file, "\n");
    }

    fprintf(file, "\nРезультат сложения матриц:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            fprintf(file, "%d ", add_result[i][j]);
        }
        fprintf(file, "\n");
    }
    fclose(file);
}

